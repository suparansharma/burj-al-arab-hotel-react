{"ast":null,"code":"var _jsxFileName = \"C:\\\\Web Development\\\\React\\\\burj-al-arab-hotel-react\\\\src\\\\components\\\\Login\\\\Login.js\";\nimport React, { useContext } from 'react';\nimport { useState } from 'react';\nimport { initializeApp } from \"firebase/app\"; // firebase.initializeApp({ ... })\n\nimport firebaseConfig from \"./firebase.config\";\nimport { GoogleAuthProvider, getAuth, signInWithPopup, signOut } from \"firebase/auth\"; // import * as firebase from 'firebase/app'\n\nconst Login = () => {\n  const [newUser, setNewUser] = useState(false);\n  const [user, setUser] = useState({\n    isSignedIn: false,\n    // newUser:false,\n    name: \"\",\n    email: \"\",\n    password: \"\",\n    photo: \"\"\n  });\n  const app = firebase.initializeApp(firebaseConfig);\n  const Googleprovider = new GoogleAuthProvider();\n  const auth = getAuth(app);\n\n  const googleSignIn = () => {\n    signInWithPopup(auth, Googleprovider).then(result => {\n      const {\n        displayName,\n        email,\n        photoURL\n      } = result.user;\n      const signedInUser = {\n        isSignedIn: true,\n        name: displayName,\n        email: email,\n        photo: photoURL\n      };\n      setUser(signedInUser);\n      console.log(displayName, email, photoURL); // const credential = GoogleAuthProvider.credentialFromResult(result);\n      // const token = credential.accessToken;\n      // const user = result.user;\n    }).catch(error => {\n      const errorCode = error.code;\n      const errorMessage = error.message;\n      const email = error.customData.email;\n      const credential = GoogleAuthProvider.credentialFromError(error);\n      console.log(errorMessage);\n    });\n  };\n\n  const googleSignOut = () => {\n    signOut(auth).then(result => {\n      // const { displayName, email, photoURL } = result.user;\n      const signedOutUser = {\n        isSignedIn: false,\n        name: \"\",\n        email: \"\",\n        photo: \"\",\n        error: \"\",\n        success: false\n      };\n      setUser(signedOutUser);\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, user.isSignedIn ? /*#__PURE__*/React.createElement(\"button\", {\n    onClick: googleSignOut,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, \"Sign Out\") : /*#__PURE__*/React.createElement(\"button\", {\n    onClick: googleSignIn,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }, \"Sign In\"));\n};\n\nexport default Login;","map":{"version":3,"sources":["C:/Web Development/React/burj-al-arab-hotel-react/src/components/Login/Login.js"],"names":["React","useContext","useState","initializeApp","firebaseConfig","GoogleAuthProvider","getAuth","signInWithPopup","signOut","Login","newUser","setNewUser","user","setUser","isSignedIn","name","email","password","photo","app","firebase","Googleprovider","auth","googleSignIn","then","result","displayName","photoURL","signedInUser","console","log","catch","error","errorCode","code","errorMessage","message","customData","credential","credentialFromError","googleSignOut","signedOutUser","success"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,aAAT,QAA8B,cAA9B,C,CACA;;AACA,OAAOC,cAAP,MAA2B,mBAA3B;AACA,SACEC,kBADF,EAEEC,OAFF,EAGEC,eAHF,EAIEC,OAJF,QAKO,eALP,C,CAMA;;AAEA,MAAMC,KAAK,GAAG,MAAM;AAChB,QAAK,CAACC,OAAD,EAASC,UAAT,IAAuBT,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM,CAACU,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAAC;AAC/BY,IAAAA,UAAU,EAAE,KADmB;AAE/B;AACAC,IAAAA,IAAI,EAAE,EAHyB;AAI/BC,IAAAA,KAAK,EAAE,EAJwB;AAK/BC,IAAAA,QAAQ,EAAE,EALqB;AAM/BC,IAAAA,KAAK,EAAE;AANwB,GAAD,CAAhC;AAQA,QAAMC,GAAG,GAAGC,QAAQ,CAACjB,aAAT,CAAuBC,cAAvB,CAAZ;AACA,QAAMiB,cAAc,GAAG,IAAIhB,kBAAJ,EAAvB;AACA,QAAMiB,IAAI,GAAGhB,OAAO,CAACa,GAAD,CAApB;;AACA,QAAMI,YAAY,GAAG,MAAM;AACvBhB,IAAAA,eAAe,CAACe,IAAD,EAAOD,cAAP,CAAf,CACGG,IADH,CACSC,MAAD,IAAY;AAChB,YAAM;AAAEC,QAAAA,WAAF;AAAeV,QAAAA,KAAf;AAAsBW,QAAAA;AAAtB,UAAmCF,MAAM,CAACb,IAAhD;AACA,YAAMgB,YAAY,GAAG;AACnBd,QAAAA,UAAU,EAAE,IADO;AAEnBC,QAAAA,IAAI,EAAEW,WAFa;AAGnBV,QAAAA,KAAK,EAAEA,KAHY;AAInBE,QAAAA,KAAK,EAAES;AAJY,OAArB;AAMAd,MAAAA,OAAO,CAACe,YAAD,CAAP;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,WAAZ,EAAyBV,KAAzB,EAAgCW,QAAhC,EATgB,CAWhB;AACA;AACA;AACD,KAfH,EAgBGI,KAhBH,CAgBUC,KAAD,IAAW;AAChB,YAAMC,SAAS,GAAGD,KAAK,CAACE,IAAxB;AACA,YAAMC,YAAY,GAAGH,KAAK,CAACI,OAA3B;AACA,YAAMpB,KAAK,GAAGgB,KAAK,CAACK,UAAN,CAAiBrB,KAA/B;AACA,YAAMsB,UAAU,GAAGjC,kBAAkB,CAACkC,mBAAnB,CAAuCP,KAAvC,CAAnB;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAYK,YAAZ;AACD,KAtBH;AAuBD,GAxBH;;AA0BE,QAAMK,aAAa,GAAG,MAAM;AAC1BhC,IAAAA,OAAO,CAACc,IAAD,CAAP,CAAcE,IAAd,CAAoBC,MAAD,IAAY;AAC7B;AACA,YAAMgB,aAAa,GAAG;AACpB3B,QAAAA,UAAU,EAAE,KADQ;AAEpBC,QAAAA,IAAI,EAAE,EAFc;AAGpBC,QAAAA,KAAK,EAAE,EAHa;AAIpBE,QAAAA,KAAK,EAAE,EAJa;AAKpBc,QAAAA,KAAK,EAAC,EALc;AAMpBU,QAAAA,OAAO,EAAC;AANY,OAAtB;AASA7B,MAAAA,OAAO,CAAC4B,aAAD,CAAP;AACD,KAZD;AAaD,GAdD;;AAeF,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK7B,IAAI,CAACE,UAAL,gBACL;AAAQ,IAAA,OAAO,EAAE0B,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADK,gBAGL;AAAQ,IAAA,OAAO,EAAEjB,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAJA,CADJ;AASH,CA/DD;;AAiEA,eAAed,KAAf","sourcesContent":["import React, { useContext } from 'react';\nimport { useState } from 'react';\nimport { initializeApp } from \"firebase/app\";\n// firebase.initializeApp({ ... })\nimport firebaseConfig from \"./firebase.config\";\nimport {\n  GoogleAuthProvider,\n  getAuth,\n  signInWithPopup,\n  signOut\n} from \"firebase/auth\";\n// import * as firebase from 'firebase/app'\n\nconst Login = () => {\n    const[newUser,setNewUser] = useState(false);\n    const [user, setUser] = useState({\n      isSignedIn: false,\n      // newUser:false,\n      name: \"\",\n      email: \"\",\n      password: \"\",\n      photo: \"\",\n    });\n    const app = firebase.initializeApp(firebaseConfig);\n    const Googleprovider = new GoogleAuthProvider();\n    const auth = getAuth(app);\n    const googleSignIn = () => {\n        signInWithPopup(auth, Googleprovider)\n          .then((result) => {\n            const { displayName, email, photoURL } = result.user;\n            const signedInUser = {\n              isSignedIn: true,\n              name: displayName,\n              email: email,\n              photo: photoURL,\n            };\n            setUser(signedInUser);\n            console.log(displayName, email, photoURL);\n    \n            // const credential = GoogleAuthProvider.credentialFromResult(result);\n            // const token = credential.accessToken;\n            // const user = result.user;\n          })\n          .catch((error) => {\n            const errorCode = error.code;\n            const errorMessage = error.message;\n            const email = error.customData.email;\n            const credential = GoogleAuthProvider.credentialFromError(error);\n            console.log(errorMessage);\n          });\n      };\n    \n      const googleSignOut = () => {\n        signOut(auth).then((result) => {\n          // const { displayName, email, photoURL } = result.user;\n          const signedOutUser = {\n            isSignedIn: false,\n            name: \"\",\n            email: \"\",\n            photo: \"\",\n            error:\"\",\n            success:false\n    \n          };\n          setUser(signedOutUser);\n        });\n      };\n    return (\n        <div>\n            {user.isSignedIn ? (\n        <button onClick={googleSignOut}>Sign Out</button>\n      ) : (\n        <button onClick={googleSignIn}>Sign In</button>\n      )}\n        </div>\n    );\n};\n\nexport default Login;"]},"metadata":{},"sourceType":"module"}